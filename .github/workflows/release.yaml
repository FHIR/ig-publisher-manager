# .github/workflows/release.yml - Enhanced Release Process with Manual Notes
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (markdown supported). Leave empty to use CHANGELOG.md'
        required: false
        type: string
      create_draft:
        description: 'Create as draft release (allows manual editing before publish)'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
      
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # If manual release notes provided, use those
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "source=manual" >> $GITHUB_OUTPUT
          cat << 'EOF' > release_notes.md
        ${{ github.event.inputs.release_notes }}
        EOF
        
        # Otherwise, try to extract from CHANGELOG.md
        elif [ -f "CHANGELOG.md" ]; then
          echo "source=changelog" >> $GITHUB_OUTPUT
          echo "Extracting release notes from CHANGELOG.md for version $VERSION"
          
          # Extract section between the version header and next version/end of file
          awk -v version="$VERSION" '
            BEGIN { found=0; printing=0 }
            /^## / { 
              if (found && printing) exit
              if ($0 ~ version) { found=1; printing=1; next }
              else { printing=0 }
            }
            printing && !/^## / { print }
          ' CHANGELOG.md > release_notes.md
          
          # If nothing found, create a default entry
          if [ ! -s release_notes.md ]; then
            echo "No release notes found in CHANGELOG.md for $VERSION, using default"
            echo "- Release $VERSION" > release_notes.md
          fi
        
        # Fallback to basic release notes
        else
          echo "source=default" >> $GITHUB_OUTPUT
          echo "- Release $VERSION" > release_notes.md
        fi
        
        # Add standard download section
        cat >> release_notes.md << 'EOF'

        ## Downloads
        Choose the appropriate file for your platform:
        - **Windows**: `.exe` installer or portable `.exe`
        - **macOS**: `.dmg` disk image
        - **Linux**: `.AppImage` (universal), `.deb` (Debian/Ubuntu), or `.rpm` (RedHat/Fedora)
        
        ## Requirements
        - [IG Publisher Requirements](https://confluence.hl7.org/spaces/FHIR/pages/35718627/IG+Publisher+Documentation): Java 11 + Ruby + Jekyll
        - Permission to Install applications
        
        ## Security Note 
        - These binaries are not signed (Yay for EV certificates that require a physical dongle)
        - On OSX, you'll have to go to the security settings and enable the application
        EOF
        
        echo "Generated release notes from: $(cat release_notes.md | wc -l) lines"
        
    - name: Show release notes preview
      run: |
        echo "=== RELEASE NOTES PREVIEW ==="
        cat release_notes.md
        echo "=== END PREVIEW ==="
        
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: IG Publisher Manager ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: ${{ github.event.inputs.create_draft == 'true' }}
        prerelease: false

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run build-linux
      
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: npm run build-win
      
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: npm run build-mac

    # Linux uploads
    - name: Find Linux files
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "APPIMAGE_FILE=$(find dist -name '*.AppImage' -type f | head -1)" >> $GITHUB_ENV
        echo "DEB_FILE=$(find dist -name '*.deb' -type f | head -1)" >> $GITHUB_ENV
        echo "RPM_FILE=$(find dist -name '*.rpm' -type f | head -1)" >> $GITHUB_ENV
        
    - name: Upload Linux AppImage
      if: matrix.os == 'ubuntu-latest' && env.APPIMAGE_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.APPIMAGE_FILE }}
        asset_name: ig-publisher-manager-linux.AppImage
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB
      if: matrix.os == 'ubuntu-latest' && env.DEB_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.DEB_FILE }}
        asset_name: ig-publisher-manager-linux.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload Linux RPM
      if: matrix.os == 'ubuntu-latest' && env.RPM_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.RPM_FILE }}
        asset_name: ig-publisher-manager-linux.rpm
        asset_content_type: application/octet-stream

    # Windows uploads
    - name: Find Windows files
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "SETUP_FILE=$(find dist -name '*Setup*.exe' -type f | head -1)" >> $GITHUB_ENV
        echo "PORTABLE_FILE=$(find dist -name '*.exe' -not -name '*Setup*' -type f | head -1)" >> $GITHUB_ENV
        
    - name: Upload Windows Installer
      if: matrix.os == 'windows-latest' && env.SETUP_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.SETUP_FILE }}
        asset_name: ig-publisher-manager-windows-installer.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Windows Portable
      if: matrix.os == 'windows-latest' && env.PORTABLE_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.PORTABLE_FILE }}
        asset_name: ig-publisher-manager-windows-portable.exe
        asset_content_type: application/octet-stream

    # macOS uploads
    - name: Find macOS files
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "DMG_FILE=$(find dist -name '*.dmg' -type f | head -1)" >> $GITHUB_ENV
        echo "ZIP_FILE=$(find dist -name '*.zip' -type f | head -1)" >> $GITHUB_ENV
        
    - name: Upload macOS DMG
      if: matrix.os == 'macos-latest' && env.DMG_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.DMG_FILE }}
        asset_name: ig-publisher-manager-macos.dmg
        asset_content_type: application/octet-stream

    - name: Upload macOS ZIP
      if: matrix.os == 'macos-latest' && env.ZIP_FILE != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload-url }}
        asset_path: ${{ env.ZIP_FILE }}
        asset_name: ig-publisher-manager-macos.zip
        asset_content_type: application/zip